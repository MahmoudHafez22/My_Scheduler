
My_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000898  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a5c  08000a5c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a5c  08000a5c  00010a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000024  08000a88  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000a88  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001721  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000056a  00000000  00000000  000217b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000150  00000000  00000000  00021f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f9b  00000000  00000000  00022050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b99  00000000  00000000  00023feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008e94  00000000  00000000  00025b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000650  00000000  00000000  0002ea18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a44 	.word	0x08000a44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000a44 	.word	0x08000a44

08000204 <GPIO_u8PinInit>:
				OutputType,
				PullType,
				AltFunc
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* PinConfig)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState=OK;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]
	/*Check weather the pointer points to Null or Not*/
	if(PinConfig != NULL)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f000 810a 	beq.w	800042c <GPIO_u8PinInit+0x228>
	{
		/* * * * * Select GPIO Mode: Input, Output, Analog, AltFunc * * * * */
		(GPIOx[PinConfig->Port]->MODER) &=~(MODER_MASK<<(MODER_PIN_ACCESS* (PinConfig->PinNum)));
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	461a      	mov	r2, r3
 800021e:	4b88      	ldr	r3, [pc, #544]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	4619      	mov	r1, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4618      	mov	r0, r3
 800023c:	4b80      	ldr	r3, [pc, #512]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800023e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000242:	400a      	ands	r2, r1
 8000244:	601a      	str	r2, [r3, #0]
		(GPIOx[PinConfig->Port]->MODER) |=((PinConfig->Mode)<<(MODER_PIN_ACCESS* (PinConfig->PinNum)));
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	4b7c      	ldr	r3, [pc, #496]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800024e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	789b      	ldrb	r3, [r3, #2]
 8000258:	4619      	mov	r1, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	785b      	ldrb	r3, [r3, #1]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	fa01 f303 	lsl.w	r3, r1, r3
 8000264:	4619      	mov	r1, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	4b74      	ldr	r3, [pc, #464]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800026e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]

		/* * * * * Select GPIO Pull State: PullUp ,PullDown ,NoPull * * * * */
		(GPIOx[PinConfig->Port]->PUPDR) &=~(PUPDR_MASK<<(PUPDR_PIN_ACCESS* (PinConfig->PinNum)));
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	461a      	mov	r2, r3
 800027c:	4b70      	ldr	r3, [pc, #448]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800027e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	2103      	movs	r1, #3
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	43db      	mvns	r3, r3
 8000292:	4619      	mov	r1, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	4b69      	ldr	r3, [pc, #420]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800029c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002a0:	400a      	ands	r2, r1
 80002a2:	60da      	str	r2, [r3, #12]
		(GPIOx[PinConfig->Port]->PUPDR) |=((PinConfig->PullType)<<(PUPDR_PIN_ACCESS* (PinConfig->PinNum)));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b65      	ldr	r3, [pc, #404]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b0:	68da      	ldr	r2, [r3, #12]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	795b      	ldrb	r3, [r3, #5]
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	785b      	ldrb	r3, [r3, #1]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	4619      	mov	r1, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	4b5d      	ldr	r3, [pc, #372]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002d0:	430a      	orrs	r2, r1
 80002d2:	60da      	str	r2, [r3, #12]
		 * IF OUTPUT MODE: OutputType AND OutputSpeed (Setting)
		 *
		 * IF ALTERNATE FUNCTION: OutputType AND OutputSpeed AND ALTERNATIVE FUNCTION (Setting)
		 *
		 * */
		if( ( (PinConfig->Mode) ==OUTPUT) || ( (PinConfig->Mode) ==ALTERNATIVE_FUNCTION) )
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	789b      	ldrb	r3, [r3, #2]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d004      	beq.n	80002e6 <GPIO_u8PinInit+0xe2>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	789b      	ldrb	r3, [r3, #2]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	f040 80a5 	bne.w	8000430 <GPIO_u8PinInit+0x22c>
		{
			/* * * * * Select the OutputType: PushPull ,Open Drain * * * * */
			(GPIOx[PinConfig->Port]->OTYPER) &=~(OTYPER_MASK<<(PinConfig->PinNum));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b54      	ldr	r3, [pc, #336]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	785b      	ldrb	r3, [r3, #1]
 80002f8:	4619      	mov	r1, r3
 80002fa:	2301      	movs	r3, #1
 80002fc:	408b      	lsls	r3, r1
 80002fe:	43db      	mvns	r3, r3
 8000300:	4619      	mov	r1, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800030a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800030e:	400a      	ands	r2, r1
 8000310:	605a      	str	r2, [r3, #4]
			(GPIOx[PinConfig->Port]->OTYPER) |=((PinConfig->OutputType)<<(PinConfig->PinNum));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b49      	ldr	r3, [pc, #292]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800031a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800031e:	685a      	ldr	r2, [r3, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	4619      	mov	r1, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	4619      	mov	r1, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	4b42      	ldr	r3, [pc, #264]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000338:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800033c:	430a      	orrs	r2, r1
 800033e:	605a      	str	r2, [r3, #4]

			/* * * * * Select the OutputSpeed:Low, Medium, Fast, High * * * * */
			(GPIOx[PinConfig->Port]->OSPEEDR) &=~(OSPEEDR_MASK<<(OSPEEDR_PIN_ACCESS*(PinConfig->PinNum)));
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	4b3e      	ldr	r3, [pc, #248]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800034c:	689a      	ldr	r2, [r3, #8]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	785b      	ldrb	r3, [r3, #1]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	2103      	movs	r1, #3
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	43db      	mvns	r3, r3
 800035c:	4619      	mov	r1, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4618      	mov	r0, r3
 8000364:	4b36      	ldr	r3, [pc, #216]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000366:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800036a:	400a      	ands	r2, r1
 800036c:	609a      	str	r2, [r3, #8]
			(GPIOx[PinConfig->Port]->OSPEEDR) |=((PinConfig->Speed)<<(OSPEEDR_PIN_ACCESS*(PinConfig->PinNum)));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	78db      	ldrb	r3, [r3, #3]
 8000380:	4619      	mov	r1, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	785b      	ldrb	r3, [r3, #1]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	4619      	mov	r1, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	4b2a      	ldr	r3, [pc, #168]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800039a:	430a      	orrs	r2, r1
 800039c:	609a      	str	r2, [r3, #8]

			/* * * * * Select the Pin Alternate Function * * * * */
			if((PinConfig->Mode)==ALTERNATIVE_FUNCTION)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	789b      	ldrb	r3, [r3, #2]
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d144      	bne.n	8000430 <GPIO_u8PinInit+0x22c>
			{
				/* * * * * ALTERNATIVE FUNCTION * * * * */
				uint8_t Local_u8RegNum = (PinConfig->PinNum) / AFR_PIN_SHIFTING;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	785b      	ldrb	r3, [r3, #1]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	73bb      	strb	r3, [r7, #14]
				uint8_t Local_u8BitNum = (PinConfig->PinNum) % AFR_PIN_SHIFTING;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	785b      	ldrb	r3, [r3, #1]
 80003b2:	f003 0307 	and.w	r3, r3, #7
 80003b6:	737b      	strb	r3, [r7, #13]
				GPIOx[PinConfig->Port]->AFR[Local_u8RegNum] &=~(AFR_MASK<<(AFR_PIN_ACCESS*(Local_u8BitNum)));
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c4:	7bba      	ldrb	r2, [r7, #14]
 80003c6:	3208      	adds	r2, #8
 80003c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003cc:	7b7b      	ldrb	r3, [r7, #13]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	220f      	movs	r2, #15
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43db      	mvns	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e6:	7bba      	ldrb	r2, [r7, #14]
 80003e8:	4001      	ands	r1, r0
 80003ea:	3208      	adds	r2, #8
 80003ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				GPIOx[PinConfig->Port]->AFR[Local_u8RegNum] |=((PinConfig->AltFunc)<<(AFR_PIN_ACCESS*(Local_u8BitNum)));
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fc:	7bba      	ldrb	r2, [r7, #14]
 80003fe:	3208      	adds	r2, #8
 8000400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	799b      	ldrb	r3, [r3, #6]
 8000408:	461a      	mov	r2, r3
 800040a:	7b7b      	ldrb	r3, [r7, #13]
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	4618      	mov	r0, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800041c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000420:	7bba      	ldrb	r2, [r7, #14]
 8000422:	4301      	orrs	r1, r0
 8000424:	3208      	adds	r2, #8
 8000426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800042a:	e001      	b.n	8000430 <GPIO_u8PinInit+0x22c>

	}
	else
	{
		/*Null pointer*/
		Local_u8ErrorState=NULL_PTR_ERR;
 800042c:	2302      	movs	r3, #2
 800042e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000430:	7bfb      	ldrb	r3, [r7, #15]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000

08000444 <GPIO_u8TogglePinValue>:
 * @param[in] Port ,PinNum
 * @retval Local_u8ErrorState
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
uint8_t GPIO_u8TogglePinValue(Port_t	Port , Pin_t	PinNum )
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState=OK;
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
	if((Port <= PORTH) && (PinNum <= PIN15))
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	2b07      	cmp	r3, #7
 800045c:	d813      	bhi.n	8000486 <GPIO_u8TogglePinValue+0x42>
 800045e:	79bb      	ldrb	r3, [r7, #6]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	d810      	bhi.n	8000486 <GPIO_u8TogglePinValue+0x42>
	{
		(GPIOx[Port]->ODR) ^=(1<<PinNum);
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <GPIO_u8TogglePinValue+0x54>)
 8000468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	2101      	movs	r1, #1
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	4618      	mov	r0, r3
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4907      	ldr	r1, [pc, #28]	; (8000498 <GPIO_u8TogglePinValue+0x54>)
 800047c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000480:	4042      	eors	r2, r0
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	e001      	b.n	800048a <GPIO_u8TogglePinValue+0x46>
	}
	else
	{
		Local_u8ErrorState=NOK;
 8000486:	2301      	movs	r3, #1
 8000488:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 800048a:	7bfb      	ldrb	r3, [r7, #15]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	20000000 	.word	0x20000000

0800049c <Stack_voidSchedulerStackInit>:

uint32_t GlobalTickCount = 0u;

__attribute__ ((naked)) void Stack_voidSchedulerStackInit(uint32_t Copy_u32Schedtos)
{
	__asm volatile ("MSR MSP , R0");
 800049c:	f380 8808 	msr	MSP, r0

	/*Can use this instead  __asm volatile ("MSR MSP , %0"::"r"(Copy_u32Schedtos));*/

	__asm volatile ("BX LR");
 80004a0:	4770      	bx	lr
}
 80004a2:	bf00      	nop

080004a4 <STK_voidInit>:

void STK_voidInit(uint32_t Copy_u32TickHz)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	/*Calculate the required number of ticks*/
	uint32_t Local_u32ReloadValue = (SYSTICK_TIM_CLK / Copy_u32TickHz);
 80004ac:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <STK_voidInit+0x50>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b4:	60fb      	str	r3, [r7, #12]

	/*Decrement by one to consider the multi-shot timer*/
	Local_u32ReloadValue--;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]

	SYSTIC->STK_LOAD = Local_u32ReloadValue;
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <STK_voidInit+0x54>)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6053      	str	r3, [r2, #4]

	/*Enable SYSTICK exception*/
	SYSTIC->STK_CTRL |= ( 1 << 1 );
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <STK_voidInit+0x54>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <STK_voidInit+0x54>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	6013      	str	r3, [r2, #0]

	/*Set clock source*/
	SYSTIC->STK_CTRL |= (1 << 2);
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <STK_voidInit+0x54>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <STK_voidInit+0x54>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	6013      	str	r3, [r2, #0]

	/*Enable SYSTICK timer peripheral*/
	SYSTIC->STK_CTRL |= (1 << 0);
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <STK_voidInit+0x54>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <STK_voidInit+0x54>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	00f42400 	.word	0x00f42400
 80004f8:	e000e010 	.word	0xe000e010

080004fc <PendSV_Handler>:

__attribute__ ((naked)) void PendSV_Handler(void)
{
	/*1- Save context of current task */
			/*1- Get current running task's PSP value */
			__asm volatile("MRS R0 , PSP");
 80004fc:	f3ef 8009 	mrs	r0, PSP

			/*2- Using that PSP value , store SF2 (R4 -> R11)*/
			__asm volatile("STMDB R0!,{R4-R11}");
 8000500:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

			__asm volatile("PUSH {LR}");
 8000504:	b500      	push	{lr}

			/*3- Save current value of PSP*/
			__asm volatile("BL SavePSPValue");
 8000506:	f000 f8eb 	bl	80006e0 <SavePSPValue>

	/*2- Retrieve context of next task*/
			/*1- Decide next task to run*/
			__asm volatile("BL UpdateNextTask");
 800050a:	f000 f8ff 	bl	800070c <UpdateNextTask>

			/*2- Get its PSP value */
			__asm volatile("BL GetCurrentPSPValue");
 800050e:	f000 f8d5 	bl	80006bc <GetCurrentPSPValue>

			__asm volatile("POP {LR}");
 8000512:	f85d eb04 	ldr.w	lr, [sp], #4

			/*3- using that PSP value , retrieve SF2(R4-R11) */
			__asm volatile("LDM R0!,{R4-R11}");
 8000516:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

			/*4- Update PSP value */
			__asm volatile("MSR PSP,R0");
 800051a:	f380 8809 	msr	PSP, r0

			/*5- Exit */
			__asm volatile("BX LR ");
 800051e:	4770      	bx	lr
}
 8000520:	bf00      	nop
	...

08000524 <UnblockTasks>:

void UnblockTasks(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
	uint8_t Local_u8TaskCounter;

	for(Local_u8TaskCounter = 1u ; Local_u8TaskCounter < MAX_TASK_NUM ; Local_u8TaskCounter++)
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e01b      	b.n	8000568 <UnblockTasks+0x44>
	{
		if(UserTasks[Local_u8TaskCounter].CurrentState == BlockedState)
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <UnblockTasks+0x58>)
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4413      	add	r3, r2
 8000538:	3308      	adds	r3, #8
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d110      	bne.n	8000562 <UnblockTasks+0x3e>
		{
			if(UserTasks[Local_u8TaskCounter].BlockCount == GlobalTickCount)
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <UnblockTasks+0x58>)
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	4413      	add	r3, r2
 8000548:	3304      	adds	r3, #4
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <UnblockTasks+0x5c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d106      	bne.n	8000562 <UnblockTasks+0x3e>
			{
				UserTasks[Local_u8TaskCounter].CurrentState = ReadyState ;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <UnblockTasks+0x58>)
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	3308      	adds	r3, #8
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	for(Local_u8TaskCounter = 1u ; Local_u8TaskCounter < MAX_TASK_NUM ; Local_u8TaskCounter++)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	3301      	adds	r3, #1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b04      	cmp	r3, #4
 800056c:	d9e0      	bls.n	8000530 <UnblockTasks+0xc>
			}
		}
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	20000040 	.word	0x20000040
 8000580:	20000090 	.word	0x20000090

08000584 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	/*1- Update Global Tick Count */
	GlobalTickCount++;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <SysTick_Handler+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <SysTick_Handler+0x28>)
 8000590:	6013      	str	r3, [r2, #0]

	/*2- Unblock Tasks */
	UnblockTasks();
 8000592:	f7ff ffc7 	bl	8000524 <UnblockTasks>

	/*3- Trigger the PendSV exception */
	SCB->ICSR |= 1 << 28 ;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <SysTick_Handler+0x2c>)
 8000598:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <SysTick_Handler+0x2c>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	e000e008 	.word	0xe000e008

080005b4 <InitTaskStack>:

void InitTaskStack(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0

	uint32_t* Local_pu8TaskPSP;
	uint8_t LoopIdx1,LoopIdx2;

	/*Tasks PSP initialization */
	UserTasks[0].PSPValue = IDLE_TASK_STACK_START;
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <InitTaskStack+0xdc>)
 80005bc:	4a35      	ldr	r2, [pc, #212]	; (8000694 <InitTaskStack+0xe0>)
 80005be:	601a      	str	r2, [r3, #0]
	UserTasks[1].PSPValue = T1_STACK_START;
 80005c0:	4b33      	ldr	r3, [pc, #204]	; (8000690 <InitTaskStack+0xdc>)
 80005c2:	4a35      	ldr	r2, [pc, #212]	; (8000698 <InitTaskStack+0xe4>)
 80005c4:	611a      	str	r2, [r3, #16]
	UserTasks[2].PSPValue = T2_STACK_START;
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <InitTaskStack+0xdc>)
 80005c8:	4a34      	ldr	r2, [pc, #208]	; (800069c <InitTaskStack+0xe8>)
 80005ca:	621a      	str	r2, [r3, #32]
	UserTasks[3].PSPValue = T3_STACK_START;
 80005cc:	4b30      	ldr	r3, [pc, #192]	; (8000690 <InitTaskStack+0xdc>)
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <InitTaskStack+0xec>)
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
	UserTasks[4].PSPValue = T4_STACK_START;
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <InitTaskStack+0xdc>)
 80005d4:	4a33      	ldr	r2, [pc, #204]	; (80006a4 <InitTaskStack+0xf0>)
 80005d6:	641a      	str	r2, [r3, #64]	; 0x40

	/*Tasks Handler initialization */
	UserTasks[0].TaskHandler = &IdleTaskHandler;
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <InitTaskStack+0xdc>)
 80005da:	4a33      	ldr	r2, [pc, #204]	; (80006a8 <InitTaskStack+0xf4>)
 80005dc:	60da      	str	r2, [r3, #12]
	UserTasks[1].TaskHandler = &Task1_Handler;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <InitTaskStack+0xdc>)
 80005e0:	4a32      	ldr	r2, [pc, #200]	; (80006ac <InitTaskStack+0xf8>)
 80005e2:	61da      	str	r2, [r3, #28]
	UserTasks[2].TaskHandler = &Task2_Handler;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <InitTaskStack+0xdc>)
 80005e6:	4a32      	ldr	r2, [pc, #200]	; (80006b0 <InitTaskStack+0xfc>)
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
	UserTasks[3].TaskHandler = &Task3_Handler;
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <InitTaskStack+0xdc>)
 80005ec:	4a31      	ldr	r2, [pc, #196]	; (80006b4 <InitTaskStack+0x100>)
 80005ee:	63da      	str	r2, [r3, #60]	; 0x3c
	UserTasks[4].TaskHandler = &Task4_Handler;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <InitTaskStack+0xdc>)
 80005f2:	4a31      	ldr	r2, [pc, #196]	; (80006b8 <InitTaskStack+0x104>)
 80005f4:	64da      	str	r2, [r3, #76]	; 0x4c

	for(LoopIdx1=0 ; LoopIdx1<MAX_TASK_NUM ; LoopIdx1++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	e03e      	b.n	800067a <InitTaskStack+0xc6>
	{
		/*Initialize Task is ready*/
		UserTasks[LoopIdx1].CurrentState = ReadyState;
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	4a24      	ldr	r2, [pc, #144]	; (8000690 <InitTaskStack+0xdc>)
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	4413      	add	r3, r2
 8000604:	3308      	adds	r3, #8
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		Local_pu8TaskPSP = (uint32_t*)UserTasks[LoopIdx1].PSPValue;
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <InitTaskStack+0xdc>)
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	4413      	add	r3, r2
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	607b      	str	r3, [r7, #4]

		Local_pu8TaskPSP--;          /*XPSR register */
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3b04      	subs	r3, #4
 800061a:	607b      	str	r3, [r7, #4]
		*Local_pu8TaskPSP = DUMMY_XPSR;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000622:	601a      	str	r2, [r3, #0]

		Local_pu8TaskPSP--;          /*PC register */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3b04      	subs	r3, #4
 8000628:	607b      	str	r3, [r7, #4]
		*Local_pu8TaskPSP = (uint32_t)UserTasks[LoopIdx1].TaskHandler;
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	4a18      	ldr	r2, [pc, #96]	; (8000690 <InitTaskStack+0xdc>)
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4413      	add	r3, r2
 8000632:	330c      	adds	r3, #12
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]

		Local_pu8TaskPSP--;          /*LR register */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3b04      	subs	r3, #4
 8000640:	607b      	str	r3, [r7, #4]
		*Local_pu8TaskPSP = DUMMY_LR;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f06f 0202 	mvn.w	r2, #2
 8000648:	601a      	str	r2, [r3, #0]

		for(LoopIdx2=0 ; LoopIdx2<13 ;LoopIdx2++)
 800064a:	2300      	movs	r3, #0
 800064c:	70bb      	strb	r3, [r7, #2]
 800064e:	e008      	b.n	8000662 <InitTaskStack+0xae>
		{
			Local_pu8TaskPSP--;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3b04      	subs	r3, #4
 8000654:	607b      	str	r3, [r7, #4]
			*Local_pu8TaskPSP = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		for(LoopIdx2=0 ; LoopIdx2<13 ;LoopIdx2++)
 800065c:	78bb      	ldrb	r3, [r7, #2]
 800065e:	3301      	adds	r3, #1
 8000660:	70bb      	strb	r3, [r7, #2]
 8000662:	78bb      	ldrb	r3, [r7, #2]
 8000664:	2b0c      	cmp	r3, #12
 8000666:	d9f3      	bls.n	8000650 <InitTaskStack+0x9c>
		}
		UserTasks[LoopIdx1].PSPValue = (uint32_t)Local_pu8TaskPSP ;
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	4908      	ldr	r1, [pc, #32]	; (8000690 <InitTaskStack+0xdc>)
 800066e:	011b      	lsls	r3, r3, #4
 8000670:	440b      	add	r3, r1
 8000672:	601a      	str	r2, [r3, #0]
	for(LoopIdx1=0 ; LoopIdx1<MAX_TASK_NUM ; LoopIdx1++)
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	3301      	adds	r3, #1
 8000678:	70fb      	strb	r3, [r7, #3]
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	2b04      	cmp	r3, #4
 800067e:	d9bd      	bls.n	80005fc <InitTaskStack+0x48>
	}
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000040 	.word	0x20000040
 8000694:	2001f000 	.word	0x2001f000
 8000698:	20020000 	.word	0x20020000
 800069c:	2001fc00 	.word	0x2001fc00
 80006a0:	2001f800 	.word	0x2001f800
 80006a4:	2001f400 	.word	0x2001f400
 80006a8:	08000869 	.word	0x08000869
 80006ac:	08000955 	.word	0x08000955
 80006b0:	0800096b 	.word	0x0800096b
 80006b4:	08000981 	.word	0x08000981
 80006b8:	08000995 	.word	0x08000995

080006bc <GetCurrentPSPValue>:

uint32_t GetCurrentPSPValue(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	return UserTasks[CurrentTask].PSPValue;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <GetCurrentPSPValue+0x1c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a05      	ldr	r2, [pc, #20]	; (80006dc <GetCurrentPSPValue+0x20>)
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	4413      	add	r3, r2
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000020 	.word	0x20000020
 80006dc:	20000040 	.word	0x20000040

080006e0 <SavePSPValue>:

void SavePSPValue(uint32_t Copy_u32CurrentPSPValue)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	UserTasks[CurrentTask].PSPValue = Copy_u32CurrentPSPValue;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SavePSPValue+0x24>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <SavePSPValue+0x28>)
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	4413      	add	r3, r2
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000020 	.word	0x20000020
 8000708:	20000040 	.word	0x20000040

0800070c <UpdateNextTask>:

void UpdateNextTask(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
	uint8_t Local_u8TaskCount ;
	for(Local_u8TaskCount=0 ; Local_u8TaskCount<MAX_TASK_NUM ; Local_u8TaskCount++)
 8000712:	2300      	movs	r3, #0
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	e01f      	b.n	8000758 <UpdateNextTask+0x4c>
	{
		CurrentTask++;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <UpdateNextTask+0x7c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <UpdateNextTask+0x7c>)
 8000720:	6013      	str	r3, [r2, #0]
		CurrentTask %= MAX_TASK_NUM;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <UpdateNextTask+0x7c>)
 8000724:	6819      	ldr	r1, [r3, #0]
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <UpdateNextTask+0x80>)
 8000728:	fba3 2301 	umull	r2, r3, r3, r1
 800072c:	089a      	lsrs	r2, r3, #2
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	1aca      	subs	r2, r1, r3
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <UpdateNextTask+0x7c>)
 8000738:	601a      	str	r2, [r3, #0]
		if((UserTasks[CurrentTask].CurrentState == ReadyState) && (Local_u8TaskCount != 0))
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <UpdateNextTask+0x7c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <UpdateNextTask+0x84>)
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	4413      	add	r3, r2
 8000744:	3308      	adds	r3, #8
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <UpdateNextTask+0x46>
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d106      	bne.n	8000760 <UpdateNextTask+0x54>
	for(Local_u8TaskCount=0 ; Local_u8TaskCount<MAX_TASK_NUM ; Local_u8TaskCount++)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3301      	adds	r3, #1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b04      	cmp	r3, #4
 800075c:	d9dc      	bls.n	8000718 <UpdateNextTask+0xc>
 800075e:	e000      	b.n	8000762 <UpdateNextTask+0x56>
		{
			/*Check if any other task is ready , excluding the Idle task*/
			break ;
 8000760:	bf00      	nop
		}
	}
	if(UserTasks[CurrentTask].CurrentState != ReadyState)         /*all tasks are blocked*/
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <UpdateNextTask+0x7c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <UpdateNextTask+0x84>)
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	3308      	adds	r3, #8
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <UpdateNextTask+0x6e>
	{
		CurrentTask = 0;
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <UpdateNextTask+0x7c>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
	}
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000020 	.word	0x20000020
 800078c:	cccccccd 	.word	0xcccccccd
 8000790:	20000040 	.word	0x20000040

08000794 <ChangeToPSP>:

__attribute__ ((naked)) void ChangeToPSP(void)
{
	/*1- Initialize PSP with Task1 Stack address start */
	__asm volatile ("PUSH {LR}");
 8000794:	b500      	push	{lr}

	__asm volatile ("BL GetCurrentPSPValue");
 8000796:	f7ff ff91 	bl	80006bc <GetCurrentPSPValue>

	__asm volatile ("MSR PSP , R0");
 800079a:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");
 800079e:	f85d eb04 	ldr.w	lr, [sp], #4

	/*2- Change SP to PSP using CONTROL register*/
	__asm volatile ("MOV R0 ,#0x02");
 80007a2:	f04f 0002 	mov.w	r0, #2

	__asm volatile ("MSR CONTROL , R0");
 80007a6:	f380 8814 	msr	CONTROL, r0

	__asm volatile ("BX LR");
 80007aa:	4770      	bx	lr
}
 80007ac:	bf00      	nop
	...

080007b0 <EnableSystemFaults>:

void EnableSystemFaults(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	SCB->SHCSR |= (1<<16) ;              /*Mem management fault enable */
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <EnableSystemFaults+0x40>)
 80007b6:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <EnableSystemFaults+0x40>)
 80007bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
	SCB->SHCSR |= (1<<17) ;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <EnableSystemFaults+0x40>)
 80007c6:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <EnableSystemFaults+0x40>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
	SCB->SHCSR |= (1<<18) ;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <EnableSystemFaults+0x40>)
 80007d6:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <EnableSystemFaults+0x40>)
 80007dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007e0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e008 	.word	0xe000e008

080007f4 <TaskDelay>:

void TaskDelay(uint32_t Copy_u32BlockCount)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if(CurrentTask != 0u )    /*Idle Task cann't be blocked */
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <TaskDelay+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d022      	beq.n	800084a <TaskDelay+0x56>
	{
		ENTER_CRITICAL_SECTION();
 8000804:	f04f 0001 	mov.w	r0, #1
 8000808:	f380 8810 	msr	PRIMASK, r0

		/*Update Task blocking period*/
		UserTasks[CurrentTask].BlockCount = Copy_u32BlockCount + GlobalTickCount;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <TaskDelay+0x68>)
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <TaskDelay+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	440a      	add	r2, r1
 8000818:	4911      	ldr	r1, [pc, #68]	; (8000860 <TaskDelay+0x6c>)
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	440b      	add	r3, r1
 800081e:	3304      	adds	r3, #4
 8000820:	601a      	str	r2, [r3, #0]

		/*Update Task state*/
		UserTasks[CurrentTask].CurrentState = BlockedState ;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <TaskDelay+0x64>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <TaskDelay+0x6c>)
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	4413      	add	r3, r2
 800082c:	3308      	adds	r3, #8
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]

		EXIT_CRITICAL_SECTION();
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f380 8810 	msr	PRIMASK, r0

		/*Call the scheduler by pending the pendsv*/
		SCB->ICSR |= 1 << 28 ;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <TaskDelay+0x70>)
 800083c:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <TaskDelay+0x70>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
	}
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000020 	.word	0x20000020
 800085c:	20000090 	.word	0x20000090
 8000860:	20000040 	.word	0x20000040
 8000864:	e000e008 	.word	0xe000e008

08000868 <IdleTaskHandler>:

void IdleTaskHandler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	while(1);
 800086c:	e7fe      	b.n	800086c <IdleTaskHandler+0x4>
	...

08000870 <RCC_AHB1EnableClk>:
{
	RCC->APB2RSTR |= (1 << Copy_enPeripheral);
}

void RCC_AHB1EnableClk(RCC_AHB1ENR_t Copy_enPeripheral)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	RCC->AHB1ENR |=(1<<Copy_enPeripheral);
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <RCC_AHB1EnableClk+0x2c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	2101      	movs	r1, #1
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <RCC_AHB1EnableClk+0x2c>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <main>:
	uint32_t i ;
	for(i=0 ; i<Count;i++);
}

int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
	PinConfig_t Channel1 =
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	f8c3 2003 	str.w	r2, [r3, #3]
 80008b2:	2302      	movs	r3, #2
 80008b4:	763b      	strb	r3, [r7, #24]
 80008b6:	2308      	movs	r3, #8
 80008b8:	767b      	strb	r3, [r7, #25]
 80008ba:	2301      	movs	r3, #1
 80008bc:	76bb      	strb	r3, [r7, #26]
			.OutputType = PUSH_PULL,
			.Speed = LOW ,
			.PullType = NOPULL
	};

	PinConfig_t Channel2 =
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	f8c3 2003 	str.w	r2, [r3, #3]
 80008ca:	2302      	movs	r3, #2
 80008cc:	743b      	strb	r3, [r7, #16]
 80008ce:	2306      	movs	r3, #6
 80008d0:	747b      	strb	r3, [r7, #17]
 80008d2:	2301      	movs	r3, #1
 80008d4:	74bb      	strb	r3, [r7, #18]
				.OutputType = PUSH_PULL,
				.Speed = LOW ,
				.PullType = NOPULL
		};

	PinConfig_t Channel3 =
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	f8c3 2003 	str.w	r2, [r3, #3]
 80008e2:	2302      	movs	r3, #2
 80008e4:	723b      	strb	r3, [r7, #8]
 80008e6:	2305      	movs	r3, #5
 80008e8:	727b      	strb	r3, [r7, #9]
 80008ea:	2301      	movs	r3, #1
 80008ec:	72bb      	strb	r3, [r7, #10]
				.OutputType = PUSH_PULL,
				.Speed = LOW ,
				.PullType = NOPULL
		};

	PinConfig_t Channel4 =
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	f8c3 2003 	str.w	r2, [r3, #3]
 80008f8:	2302      	movs	r3, #2
 80008fa:	703b      	strb	r3, [r7, #0]
 80008fc:	2309      	movs	r3, #9
 80008fe:	707b      	strb	r3, [r7, #1]
 8000900:	2301      	movs	r3, #1
 8000902:	70bb      	strb	r3, [r7, #2]
				.Mode = OUTPUT,
				.OutputType = PUSH_PULL,
				.Speed = LOW ,
				.PullType = NOPULL
		};
	RCC_AHB1EnableClk(AHB1_GPIOC);
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff ffb3 	bl	8000870 <RCC_AHB1EnableClk>

	GPIO_u8PinInit(&Channel1);
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc78 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&Channel2);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fc73 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&Channel3);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc6e 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&Channel4);
 8000928:	463b      	mov	r3, r7
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc6a 	bl	8000204 <GPIO_u8PinInit>

	EnableSystemFaults();
 8000930:	f7ff ff3e 	bl	80007b0 <EnableSystemFaults>
	STK_voidInit(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f7ff fdb4 	bl	80004a4 <STK_voidInit>
	Stack_voidSchedulerStackInit(SCHED_TASK_STACK);
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <main+0xb0>)
 800093e:	f7ff fdad 	bl	800049c <Stack_voidSchedulerStackInit>
	InitTaskStack();
 8000942:	f7ff fe37 	bl	80005b4 <InitTaskStack>
	ChangeToPSP();
 8000946:	f7ff ff25 	bl	8000794 <ChangeToPSP>
	Task1_Handler();
 800094a:	f000 f803 	bl	8000954 <Task1_Handler>
    /* Loop forever */
	for(;;);
 800094e:	e7fe      	b.n	800094e <main+0xae>
 8000950:	2001ec00 	.word	0x2001ec00

08000954 <Task1_Handler>:
}

void Task1_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANNEL1_PORT, CHANNEL1_PIN);
 8000958:	2108      	movs	r1, #8
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff fd72 	bl	8000444 <GPIO_u8TogglePinValue>
		TaskDelay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f7ff ff46 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANNEL1_PORT, CHANNEL1_PIN);
 8000968:	e7f6      	b.n	8000958 <Task1_Handler+0x4>

0800096a <Task2_Handler>:
	}
}
void Task2_Handler(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANNEL2_PORT, CHANNEL2_PIN);
 800096e:	2106      	movs	r1, #6
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fd67 	bl	8000444 <GPIO_u8TogglePinValue>
		TaskDelay(500);
 8000976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097a:	f7ff ff3b 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANNEL2_PORT, CHANNEL2_PIN);
 800097e:	e7f6      	b.n	800096e <Task2_Handler+0x4>

08000980 <Task3_Handler>:
	}
}
void Task3_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANNEL3_PORT, CHANNEL3_PIN);
 8000984:	2105      	movs	r1, #5
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fd5c 	bl	8000444 <GPIO_u8TogglePinValue>
		TaskDelay(250);
 800098c:	20fa      	movs	r0, #250	; 0xfa
 800098e:	f7ff ff31 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANNEL3_PORT, CHANNEL3_PIN);
 8000992:	e7f7      	b.n	8000984 <Task3_Handler+0x4>

08000994 <Task4_Handler>:
	}
}
void Task4_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(CHANNEL4_PORT, CHANNEL4_PIN);
 8000998:	2109      	movs	r1, #9
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff fd52 	bl	8000444 <GPIO_u8TogglePinValue>
		TaskDelay(125);
 80009a0:	207d      	movs	r0, #125	; 0x7d
 80009a2:	f7ff ff27 	bl	80007f4 <TaskDelay>
		GPIO_u8TogglePinValue(CHANNEL4_PORT, CHANNEL4_PIN);
 80009a6:	e7f7      	b.n	8000998 <Task4_Handler+0x4>

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f811 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff ff61 	bl	80008a0 <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80009ec:	08000a64 	.word	0x08000a64
  ldr r2, =_sbss
 80009f0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80009f4:	20000094 	.word	0x20000094

080009f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4d0d      	ldr	r5, [pc, #52]	; (8000a34 <__libc_init_array+0x38>)
 8000a00:	4c0d      	ldr	r4, [pc, #52]	; (8000a38 <__libc_init_array+0x3c>)
 8000a02:	1b64      	subs	r4, r4, r5
 8000a04:	10a4      	asrs	r4, r4, #2
 8000a06:	2600      	movs	r6, #0
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	4d0b      	ldr	r5, [pc, #44]	; (8000a3c <__libc_init_array+0x40>)
 8000a0e:	4c0c      	ldr	r4, [pc, #48]	; (8000a40 <__libc_init_array+0x44>)
 8000a10:	f000 f818 	bl	8000a44 <_init>
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	2600      	movs	r6, #0
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000a5c 	.word	0x08000a5c
 8000a38:	08000a5c 	.word	0x08000a5c
 8000a3c:	08000a5c 	.word	0x08000a5c
 8000a40:	08000a60 	.word	0x08000a60

08000a44 <_init>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr

08000a50 <_fini>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr
